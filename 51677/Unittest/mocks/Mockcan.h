/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCAN_H
#define _MOCKCAN_H

#include "Types.h"
#include "can.h"

void Mockcan_Init(void);
void Mockcan_Destroy(void);
void Mockcan_Verify(void);




#define flexCAN_readMB_Ignore() flexCAN_readMB_CMockIgnore(__LINE__)
void flexCAN_readMB_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define flexCAN_readMB_Expect() flexCAN_readMB_CMockExpect(__LINE__)
void flexCAN_readMB_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_flexCAN_readMB_CALLBACK)(int cmock_num_calls);
void flexCAN_readMB_StubWithCallback(CMOCK_flexCAN_readMB_CALLBACK Callback);
#define read_flexcan_IgnoreAndReturn(cmock_retval) read_flexcan_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void read_flexcan_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define read_flexcan_ExpectAndReturn(cmock_retval) read_flexcan_CMockExpectAndReturn(__LINE__, cmock_retval)
void read_flexcan_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_read_flexcan_CALLBACK)(int cmock_num_calls);
void read_flexcan_StubWithCallback(CMOCK_read_flexcan_CALLBACK Callback);
#define flexCAN_write_fast_msgs_IgnoreAndReturn(cmock_retval) flexCAN_write_fast_msgs_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void flexCAN_write_fast_msgs_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define flexCAN_write_fast_msgs_ExpectAndReturn(cmock_retval) flexCAN_write_fast_msgs_CMockExpectAndReturn(__LINE__, cmock_retval)
void flexCAN_write_fast_msgs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_flexCAN_write_fast_msgs_CALLBACK)(int cmock_num_calls);
void flexCAN_write_fast_msgs_StubWithCallback(CMOCK_flexCAN_write_fast_msgs_CALLBACK Callback);
#define FlexCAN_Write0x82Msg_Ignore() FlexCAN_Write0x82Msg_CMockIgnore(__LINE__)
void FlexCAN_Write0x82Msg_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define FlexCAN_Write0x82Msg_Expect() FlexCAN_Write0x82Msg_CMockExpect(__LINE__)
void FlexCAN_Write0x82Msg_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_FlexCAN_Write0x82Msg_CALLBACK)(int cmock_num_calls);
void FlexCAN_Write0x82Msg_StubWithCallback(CMOCK_FlexCAN_Write0x82Msg_CALLBACK Callback);
#define flexcan_init_IgnoreAndReturn(cmock_retval) flexcan_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void flexcan_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define flexcan_init_ExpectAndReturn(cmock_retval) flexcan_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void flexcan_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_flexcan_init_CALLBACK)(int cmock_num_calls);
void flexcan_init_StubWithCallback(CMOCK_flexcan_init_CALLBACK Callback);
#define can_wdog_rx_IgnoreAndReturn(cmock_retval) can_wdog_rx_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void can_wdog_rx_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define can_wdog_rx_ExpectAndReturn(cmock_retval) can_wdog_rx_CMockExpectAndReturn(__LINE__, cmock_retval)
void can_wdog_rx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_can_wdog_rx_CALLBACK)(int cmock_num_calls);
void can_wdog_rx_StubWithCallback(CMOCK_can_wdog_rx_CALLBACK Callback);
#define flexCAN_write_slow_msgs_IgnoreAndReturn(cmock_retval) flexCAN_write_slow_msgs_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void flexCAN_write_slow_msgs_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define flexCAN_write_slow_msgs_ExpectAndReturn(cmock_retval) flexCAN_write_slow_msgs_CMockExpectAndReturn(__LINE__, cmock_retval)
void flexCAN_write_slow_msgs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_flexCAN_write_slow_msgs_CALLBACK)(int cmock_num_calls);
void flexCAN_write_slow_msgs_StubWithCallback(CMOCK_flexCAN_write_slow_msgs_CALLBACK Callback);

#endif

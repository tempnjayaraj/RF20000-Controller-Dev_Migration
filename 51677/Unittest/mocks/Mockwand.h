/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKWAND_H
#define _MOCKWAND_H

#include "Types.h"
#include "wand.h"

void Mockwand_Init(void);
void Mockwand_Destroy(void);
void Mockwand_Verify(void);




#define SmartWandSendCMD_Ignore() SmartWandSendCMD_CMockIgnore(__LINE__)
void SmartWandSendCMD_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define SmartWandSendCMD_Expect(cmock_arg1, cmock_arg2) SmartWandSendCMD_CMockExpect(__LINE__, cmock_arg1, cmock_arg2)
void SmartWandSendCMD_CMockExpect(UNITY_LINE_TYPE cmock_line, volatile uint8_t* cmock_arg1, uint8_t cmock_arg2);
typedef void (* CMOCK_SmartWandSendCMD_CALLBACK)(volatile uint8_t* cmock_arg1, uint8_t cmock_arg2, int cmock_num_calls);
void SmartWandSendCMD_StubWithCallback(CMOCK_SmartWandSendCMD_CALLBACK Callback);
#define smartwand_prepare_tx_packet_IgnoreAndReturn(cmock_retval) smartwand_prepare_tx_packet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smartwand_prepare_tx_packet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define smartwand_prepare_tx_packet_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_arg3, cmock_arg4, cmock_retval) smartwand_prepare_tx_packet_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_arg4, cmock_retval)
void smartwand_prepare_tx_packet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_arg2, uint8_t* cmock_arg3, uint8_t cmock_arg4, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_smartwand_prepare_tx_packet_CALLBACK)(uint8_t cmock_arg1, uint8_t cmock_arg2, uint8_t* cmock_arg3, uint8_t cmock_arg4, int cmock_num_calls);
void smartwand_prepare_tx_packet_StubWithCallback(CMOCK_smartwand_prepare_tx_packet_CALLBACK Callback);
#define SmartWand_DMA_Init_Ignore() SmartWand_DMA_Init_CMockIgnore(__LINE__)
void SmartWand_DMA_Init_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define SmartWand_DMA_Init_Expect() SmartWand_DMA_Init_CMockExpect(__LINE__)
void SmartWand_DMA_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SmartWand_DMA_Init_CALLBACK)(int cmock_num_calls);
void SmartWand_DMA_Init_StubWithCallback(CMOCK_SmartWand_DMA_Init_CALLBACK Callback);
#define smartwand_uart_init_IgnoreAndReturn(cmock_retval) smartwand_uart_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smartwand_uart_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define smartwand_uart_init_ExpectAndReturn(cmock_retval) smartwand_uart_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void smartwand_uart_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_smartwand_uart_init_CALLBACK)(int cmock_num_calls);
void smartwand_uart_init_StubWithCallback(CMOCK_smartwand_uart_init_CALLBACK Callback);
#define SmartWand_GPIO_Init_Ignore() SmartWand_GPIO_Init_CMockIgnore(__LINE__)
void SmartWand_GPIO_Init_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define SmartWand_GPIO_Init_Expect() SmartWand_GPIO_Init_CMockExpect(__LINE__)
void SmartWand_GPIO_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SmartWand_GPIO_Init_CALLBACK)(int cmock_num_calls);
void SmartWand_GPIO_Init_StubWithCallback(CMOCK_SmartWand_GPIO_Init_CALLBACK Callback);
#define SmartWand_Timeout_Init_Ignore() SmartWand_Timeout_Init_CMockIgnore(__LINE__)
void SmartWand_Timeout_Init_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define SmartWand_Timeout_Init_Expect() SmartWand_Timeout_Init_CMockExpect(__LINE__)
void SmartWand_Timeout_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SmartWand_Timeout_Init_CALLBACK)(int cmock_num_calls);
void SmartWand_Timeout_Init_StubWithCallback(CMOCK_SmartWand_Timeout_Init_CALLBACK Callback);
#define smartwand_timeout_IgnoreAndReturn(cmock_retval) smartwand_timeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smartwand_timeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define smartwand_timeout_ExpectAndReturn(cmock_retval) smartwand_timeout_CMockExpectAndReturn(__LINE__, cmock_retval)
void smartwand_timeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_smartwand_timeout_CALLBACK)(int cmock_num_calls);
void smartwand_timeout_StubWithCallback(CMOCK_smartwand_timeout_CALLBACK Callback);
#define smartwand_periodic_packet_handler_Ignore() smartwand_periodic_packet_handler_CMockIgnore(__LINE__)
void smartwand_periodic_packet_handler_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define smartwand_periodic_packet_handler_Expect() smartwand_periodic_packet_handler_CMockExpect(__LINE__)
void smartwand_periodic_packet_handler_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_smartwand_periodic_packet_handler_CALLBACK)(int cmock_num_calls);
void smartwand_periodic_packet_handler_StubWithCallback(CMOCK_smartwand_periodic_packet_handler_CALLBACK Callback);
#define wand_periodic_packet_parse_IgnoreAndReturn(cmock_retval) wand_periodic_packet_parse_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_periodic_packet_parse_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_periodic_packet_parse_ExpectAndReturn(cmock_retval) wand_periodic_packet_parse_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_periodic_packet_parse_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_periodic_packet_parse_CALLBACK)(int cmock_num_calls);
void wand_periodic_packet_parse_StubWithCallback(CMOCK_wand_periodic_packet_parse_CALLBACK Callback);
#define half2float_IgnoreAndReturn(cmock_retval) half2float_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void half2float_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float32_t cmock_to_return);
#define half2float_ExpectAndReturn(cmock_arg1, cmock_retval) half2float_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void half2float_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_arg1, float32_t cmock_to_return);
typedef float32_t (* CMOCK_half2float_CALLBACK)(uint16_t cmock_arg1, int cmock_num_calls);
void half2float_StubWithCallback(CMOCK_half2float_CALLBACK Callback);
#define float2half_IgnoreAndReturn(cmock_retval) float2half_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void float2half_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define float2half_ExpectAndReturn(cmock_arg1, cmock_retval) float2half_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void float2half_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float32_t cmock_arg1, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_float2half_CALLBACK)(float32_t cmock_arg1, int cmock_num_calls);
void float2half_StubWithCallback(CMOCK_float2half_CALLBACK Callback);
#define wand_validate_IgnoreAndReturn(cmock_retval) wand_validate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_validate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_validate_ExpectAndReturn(cmock_retval) wand_validate_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_validate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_validate_CALLBACK)(int cmock_num_calls);
void wand_validate_StubWithCallback(CMOCK_wand_validate_CALLBACK Callback);
#define wand_download_parm_pg_0_IgnoreAndReturn(cmock_retval) wand_download_parm_pg_0_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_0_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_download_parm_pg_0_ExpectAndReturn(cmock_retval) wand_download_parm_pg_0_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_0_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_download_parm_pg_0_CALLBACK)(int cmock_num_calls);
void wand_download_parm_pg_0_StubWithCallback(CMOCK_wand_download_parm_pg_0_CALLBACK Callback);
#define wand_download_parm_pg_1_IgnoreAndReturn(cmock_retval) wand_download_parm_pg_1_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_1_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_download_parm_pg_1_ExpectAndReturn(cmock_retval) wand_download_parm_pg_1_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_1_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_download_parm_pg_1_CALLBACK)(int cmock_num_calls);
void wand_download_parm_pg_1_StubWithCallback(CMOCK_wand_download_parm_pg_1_CALLBACK Callback);
#define wand_download_parm_pg_2_IgnoreAndReturn(cmock_retval) wand_download_parm_pg_2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_download_parm_pg_2_ExpectAndReturn(cmock_retval) wand_download_parm_pg_2_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_download_parm_pg_2_CALLBACK)(int cmock_num_calls);
void wand_download_parm_pg_2_StubWithCallback(CMOCK_wand_download_parm_pg_2_CALLBACK Callback);
#define wand_download_parm_pg_3_IgnoreAndReturn(cmock_retval) wand_download_parm_pg_3_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_3_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_download_parm_pg_3_ExpectAndReturn(cmock_retval) wand_download_parm_pg_3_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_3_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_download_parm_pg_3_CALLBACK)(int cmock_num_calls);
void wand_download_parm_pg_3_StubWithCallback(CMOCK_wand_download_parm_pg_3_CALLBACK Callback);
#define wand_download_parm_pg_4_IgnoreAndReturn(cmock_retval) wand_download_parm_pg_4_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_4_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_download_parm_pg_4_ExpectAndReturn(cmock_retval) wand_download_parm_pg_4_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_download_parm_pg_4_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_download_parm_pg_4_CALLBACK)(int cmock_num_calls);
void wand_download_parm_pg_4_StubWithCallback(CMOCK_wand_download_parm_pg_4_CALLBACK Callback);
#define wand_unlock_IgnoreAndReturn(cmock_retval) wand_unlock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_unlock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_unlock_ExpectAndReturn(cmock_retval) wand_unlock_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_unlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_unlock_CALLBACK)(int cmock_num_calls);
void wand_unlock_StubWithCallback(CMOCK_wand_unlock_CALLBACK Callback);
#define wand_lock_IgnoreAndReturn(cmock_retval) wand_lock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_lock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_lock_ExpectAndReturn(cmock_retval) wand_lock_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_lock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_lock_CALLBACK)(int cmock_num_calls);
void wand_lock_StubWithCallback(CMOCK_wand_lock_CALLBACK Callback);
#define wand_tx_IgnoreAndReturn(cmock_retval) wand_tx_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_tx_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_tx_ExpectAndReturn(cmock_retval) wand_tx_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_tx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_tx_CALLBACK)(int cmock_num_calls);
void wand_tx_StubWithCallback(CMOCK_wand_tx_CALLBACK Callback);
#define wand_static_read_IgnoreAndReturn(cmock_retval) wand_static_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_static_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_static_read_ExpectAndReturn(cmock_retval) wand_static_read_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_static_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_static_read_CALLBACK)(int cmock_num_calls);
void wand_static_read_StubWithCallback(CMOCK_wand_static_read_CALLBACK Callback);
#define wand_static_write_IgnoreAndReturn(cmock_retval) wand_static_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_static_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_static_write_ExpectAndReturn(cmock_retval) wand_static_write_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_static_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_static_write_CALLBACK)(int cmock_num_calls);
void wand_static_write_StubWithCallback(CMOCK_wand_static_write_CALLBACK Callback);
#define smartwand_send_packet_Ignore() smartwand_send_packet_CMockIgnore(__LINE__)
void smartwand_send_packet_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define smartwand_send_packet_Expect() smartwand_send_packet_CMockExpect(__LINE__)
void smartwand_send_packet_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_smartwand_send_packet_CALLBACK)(int cmock_num_calls);
void smartwand_send_packet_StubWithCallback(CMOCK_smartwand_send_packet_CALLBACK Callback);
#define wand_circle_log_read_IgnoreAndReturn(cmock_retval) wand_circle_log_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_circle_log_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_circle_log_read_ExpectAndReturn(cmock_retval) wand_circle_log_read_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_circle_log_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_circle_log_read_CALLBACK)(int cmock_num_calls);
void wand_circle_log_read_StubWithCallback(CMOCK_wand_circle_log_read_CALLBACK Callback);
#define log_use_data_Ignore() log_use_data_CMockIgnore(__LINE__)
void log_use_data_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define log_use_data_Expect(cmock_arg1) log_use_data_CMockExpect(__LINE__, cmock_arg1)
void log_use_data_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t cmock_arg1);
typedef void (* CMOCK_log_use_data_CALLBACK)(uint32_t cmock_arg1, int cmock_num_calls);
void log_use_data_StubWithCallback(CMOCK_log_use_data_CALLBACK Callback);
#define wand_use_limit_check_IgnoreAndReturn(cmock_retval) wand_use_limit_check_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_use_limit_check_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_use_limit_check_ExpectAndReturn(cmock_retval) wand_use_limit_check_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_use_limit_check_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_use_limit_check_CALLBACK)(int cmock_num_calls);
void wand_use_limit_check_StubWithCallback(CMOCK_wand_use_limit_check_CALLBACK Callback);
#define wand_expired_check_IgnoreAndReturn(cmock_retval) wand_expired_check_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_expired_check_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_expired_check_ExpectAndReturn(cmock_retval) wand_expired_check_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_expired_check_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_expired_check_CALLBACK)(int cmock_num_calls);
void wand_expired_check_StubWithCallback(CMOCK_wand_expired_check_CALLBACK Callback);
#define thermometer_color_IgnoreAndReturn(cmock_retval) thermometer_color_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void thermometer_color_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define thermometer_color_ExpectAndReturn(temperature, cmock_retval) thermometer_color_CMockExpectAndReturn(__LINE__, temperature, cmock_retval)
void thermometer_color_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t temperature, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_thermometer_color_CALLBACK)(uint8_t temperature, int cmock_num_calls);
void thermometer_color_StubWithCallback(CMOCK_thermometer_color_CALLBACK Callback);
#define extract_wand_params_Ignore() extract_wand_params_CMockIgnore(__LINE__)
void extract_wand_params_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define extract_wand_params_Expect() extract_wand_params_CMockExpect(__LINE__)
void extract_wand_params_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_extract_wand_params_CALLBACK)(int cmock_num_calls);
void extract_wand_params_StubWithCallback(CMOCK_extract_wand_params_CALLBACK Callback);
#define convert_q62_ambient_to_7bit_IgnoreAndReturn(cmock_retval) convert_q62_ambient_to_7bit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void convert_q62_ambient_to_7bit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define convert_q62_ambient_to_7bit_ExpectAndReturn(cmock_arg1, cmock_retval) convert_q62_ambient_to_7bit_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void convert_q62_ambient_to_7bit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_convert_q62_ambient_to_7bit_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void convert_q62_ambient_to_7bit_StubWithCallback(CMOCK_convert_q62_ambient_to_7bit_CALLBACK Callback);
#define periodic_log_errors2wand_IgnoreAndReturn(cmock_retval) periodic_log_errors2wand_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void periodic_log_errors2wand_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define periodic_log_errors2wand_ExpectAndReturn(cmock_retval) periodic_log_errors2wand_CMockExpectAndReturn(__LINE__, cmock_retval)
void periodic_log_errors2wand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_periodic_log_errors2wand_CALLBACK)(int cmock_num_calls);
void periodic_log_errors2wand_StubWithCallback(CMOCK_periodic_log_errors2wand_CALLBACK Callback);
#define wand_time_limit_check_IgnoreAndReturn(cmock_retval) wand_time_limit_check_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_time_limit_check_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_time_limit_check_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_retval) wand_time_limit_check_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_retval)
void wand_time_limit_check_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* cmock_arg1, uint16_t* cmock_arg2, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_time_limit_check_CALLBACK)(uint8_t* cmock_arg1, uint16_t* cmock_arg2, int cmock_num_calls);
void wand_time_limit_check_StubWithCallback(CMOCK_wand_time_limit_check_CALLBACK Callback);
#define set_use_limit_time_IgnoreAndReturn(cmock_retval) set_use_limit_time_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void set_use_limit_time_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define set_use_limit_time_ExpectAndReturn(cmock_arg1, cmock_retval) set_use_limit_time_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void set_use_limit_time_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* cmock_arg1, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_set_use_limit_time_CALLBACK)(uint32_t* cmock_arg1, int cmock_num_calls);
void set_use_limit_time_StubWithCallback(CMOCK_set_use_limit_time_CALLBACK Callback);
#define wand_circle_write_IgnoreAndReturn(cmock_retval) wand_circle_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_circle_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_circle_write_ExpectAndReturn(cmock_retval) wand_circle_write_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_circle_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_circle_write_CALLBACK)(int cmock_num_calls);
void wand_circle_write_StubWithCallback(CMOCK_wand_circle_write_CALLBACK Callback);
#define wand_thandle_wear_monitor_IgnoreAndReturn(cmock_retval) wand_thandle_wear_monitor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_thandle_wear_monitor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_thandle_wear_monitor_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval) wand_thandle_wear_monitor_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval)
void wand_thandle_wear_monitor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_arg2, uint8_t cmock_arg3, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_thandle_wear_monitor_CALLBACK)(uint8_t cmock_arg1, uint8_t cmock_arg2, uint8_t cmock_arg3, int cmock_num_calls);
void wand_thandle_wear_monitor_StubWithCallback(CMOCK_wand_thandle_wear_monitor_CALLBACK Callback);
#define wand_wear_monitor_IgnoreAndReturn(cmock_retval) wand_wear_monitor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_wear_monitor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_wear_monitor_ExpectAndReturn(cmock_retval) wand_wear_monitor_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_wear_monitor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_wear_monitor_CALLBACK)(int cmock_num_calls);
void wand_wear_monitor_StubWithCallback(CMOCK_wand_wear_monitor_CALLBACK Callback);
#define wand_irms_wear_monitor_IgnoreAndReturn(cmock_retval) wand_irms_wear_monitor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_irms_wear_monitor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_irms_wear_monitor_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_retval) wand_irms_wear_monitor_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_retval)
void wand_irms_wear_monitor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_arg2, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_irms_wear_monitor_CALLBACK)(uint8_t cmock_arg1, uint8_t cmock_arg2, int cmock_num_calls);
void wand_irms_wear_monitor_StubWithCallback(CMOCK_wand_irms_wear_monitor_CALLBACK Callback);
#define switch_to_ww_wand_IgnoreAndReturn(cmock_retval) switch_to_ww_wand_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void switch_to_ww_wand_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define switch_to_ww_wand_ExpectAndReturn(cmock_retval) switch_to_ww_wand_CMockExpectAndReturn(__LINE__, cmock_retval)
void switch_to_ww_wand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_switch_to_ww_wand_CALLBACK)(int cmock_num_calls);
void switch_to_ww_wand_StubWithCallback(CMOCK_switch_to_ww_wand_CALLBACK Callback);
#define WandFIR_Init_Ignore() WandFIR_Init_CMockIgnore(__LINE__)
void WandFIR_Init_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define WandFIR_Init_Expect(cmock_arg1) WandFIR_Init_CMockExpect(__LINE__, cmock_arg1)
void WandFIR_Init_CMockExpect(UNITY_LINE_TYPE cmock_line, q15_t cmock_arg1);
typedef void (* CMOCK_WandFIR_Init_CALLBACK)(q15_t cmock_arg1, int cmock_num_calls);
void WandFIR_Init_StubWithCallback(CMOCK_WandFIR_Init_CALLBACK Callback);
#define wand_mode_life_histogram_Ignore() wand_mode_life_histogram_CMockIgnore(__LINE__)
void wand_mode_life_histogram_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define wand_mode_life_histogram_Expect(cmock_arg1, cmock_arg2) wand_mode_life_histogram_CMockExpect(__LINE__, cmock_arg1, cmock_arg2)
void wand_mode_life_histogram_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t* cmock_arg1, uint8_t* cmock_arg2);
typedef void (* CMOCK_wand_mode_life_histogram_CALLBACK)(uint32_t* cmock_arg1, uint8_t* cmock_arg2, int cmock_num_calls);
void wand_mode_life_histogram_StubWithCallback(CMOCK_wand_mode_life_histogram_CALLBACK Callback);
#define wand_not_active_periodic_packet_parse_IgnoreAndReturn(cmock_retval) wand_not_active_periodic_packet_parse_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_not_active_periodic_packet_parse_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_not_active_periodic_packet_parse_ExpectAndReturn(cmock_retval) wand_not_active_periodic_packet_parse_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_not_active_periodic_packet_parse_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_not_active_periodic_packet_parse_CALLBACK)(int cmock_num_calls);
void wand_not_active_periodic_packet_parse_StubWithCallback(CMOCK_wand_not_active_periodic_packet_parse_CALLBACK Callback);
#define wand_worn_use_limit_IgnoreAndReturn(cmock_retval) wand_worn_use_limit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wand_worn_use_limit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wand_worn_use_limit_ExpectAndReturn(cmock_retval) wand_worn_use_limit_CMockExpectAndReturn(__LINE__, cmock_retval)
void wand_worn_use_limit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wand_worn_use_limit_CALLBACK)(int cmock_num_calls);
void wand_worn_use_limit_StubWithCallback(CMOCK_wand_worn_use_limit_CALLBACK Callback);
#define z_limit_adjust4temp_IgnoreAndReturn(cmock_retval) z_limit_adjust4temp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void z_limit_adjust4temp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define z_limit_adjust4temp_ExpectAndReturn(cmock_arg1, cmock_retval) z_limit_adjust4temp_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void z_limit_adjust4temp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_z_limit_adjust4temp_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void z_limit_adjust4temp_StubWithCallback(CMOCK_z_limit_adjust4temp_CALLBACK Callback);
#define get_ww_temp_IgnoreAndReturn(cmock_retval) get_ww_temp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_ww_temp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define get_ww_temp_ExpectAndReturn(cmock_retval) get_ww_temp_CMockExpectAndReturn(__LINE__, cmock_retval)
void get_ww_temp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_ww_temp_CALLBACK)(int cmock_num_calls);
void get_ww_temp_StubWithCallback(CMOCK_get_ww_temp_CALLBACK Callback);
#define manta_coag_mode_increment_IgnoreAndReturn(cmock_retval) manta_coag_mode_increment_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void manta_coag_mode_increment_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define manta_coag_mode_increment_ExpectAndReturn(cmock_retval) manta_coag_mode_increment_CMockExpectAndReturn(__LINE__, cmock_retval)
void manta_coag_mode_increment_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_manta_coag_mode_increment_CALLBACK)(int cmock_num_calls);
void manta_coag_mode_increment_StubWithCallback(CMOCK_manta_coag_mode_increment_CALLBACK Callback);
#define manta_boundary_limit_flow_vals_Ignore() manta_boundary_limit_flow_vals_CMockIgnore(__LINE__)
void manta_boundary_limit_flow_vals_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define manta_boundary_limit_flow_vals_Expect() manta_boundary_limit_flow_vals_CMockExpect(__LINE__)
void manta_boundary_limit_flow_vals_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_manta_boundary_limit_flow_vals_CALLBACK)(int cmock_num_calls);
void manta_boundary_limit_flow_vals_StubWithCallback(CMOCK_manta_boundary_limit_flow_vals_CALLBACK Callback);

#endif

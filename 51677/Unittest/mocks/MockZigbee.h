/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKZIGBEE_H
#define _MOCKZIGBEE_H

#include "Types.h"
#include "Zigbee.h"

void MockZigbee_Init(void);
void MockZigbee_Destroy(void);
void MockZigbee_Verify(void);




#define zigbee_init_IgnoreAndReturn(cmock_retval) zigbee_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void zigbee_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define zigbee_init_ExpectAndReturn(cmock_retval) zigbee_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void zigbee_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_zigbee_init_CALLBACK)(int cmock_num_calls);
void zigbee_init_StubWithCallback(CMOCK_zigbee_init_CALLBACK Callback);
#define UART5_Init_Ignore() UART5_Init_CMockIgnore(__LINE__)
void UART5_Init_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define UART5_Init_Expect() UART5_Init_CMockExpect(__LINE__)
void UART5_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_UART5_Init_CALLBACK)(int cmock_num_calls);
void UART5_Init_StubWithCallback(CMOCK_UART5_Init_CALLBACK Callback);
#define enable_datastream_Ignore() enable_datastream_CMockIgnore(__LINE__)
void enable_datastream_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define enable_datastream_Expect() enable_datastream_CMockExpect(__LINE__)
void enable_datastream_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_enable_datastream_CALLBACK)(int cmock_num_calls);
void enable_datastream_StubWithCallback(CMOCK_enable_datastream_CALLBACK Callback);
#define request_statusbytes_IgnoreAndReturn(cmock_retval) request_statusbytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void request_statusbytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define request_statusbytes_ExpectAndReturn(cmock_retval) request_statusbytes_CMockExpectAndReturn(__LINE__, cmock_retval)
void request_statusbytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_request_statusbytes_CALLBACK)(int cmock_num_calls);
void request_statusbytes_StubWithCallback(CMOCK_request_statusbytes_CALLBACK Callback);
#define send_wireless_cmd_Ignore() send_wireless_cmd_CMockIgnore(__LINE__)
void send_wireless_cmd_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define send_wireless_cmd_Expect() send_wireless_cmd_CMockExpect(__LINE__)
void send_wireless_cmd_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_send_wireless_cmd_CALLBACK)(int cmock_num_calls);
void send_wireless_cmd_StubWithCallback(CMOCK_send_wireless_cmd_CALLBACK Callback);
#define receive_wireless_cmd_Ignore() receive_wireless_cmd_CMockIgnore(__LINE__)
void receive_wireless_cmd_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define receive_wireless_cmd_Expect() receive_wireless_cmd_CMockExpect(__LINE__)
void receive_wireless_cmd_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_receive_wireless_cmd_CALLBACK)(int cmock_num_calls);
void receive_wireless_cmd_StubWithCallback(CMOCK_receive_wireless_cmd_CALLBACK Callback);
#define wireless_handshake_IgnoreAndReturn(cmock_retval) wireless_handshake_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void wireless_handshake_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define wireless_handshake_ExpectAndReturn(cmock_retval) wireless_handshake_CMockExpectAndReturn(__LINE__, cmock_retval)
void wireless_handshake_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_wireless_handshake_CALLBACK)(int cmock_num_calls);
void wireless_handshake_StubWithCallback(CMOCK_wireless_handshake_CALLBACK Callback);

#endif

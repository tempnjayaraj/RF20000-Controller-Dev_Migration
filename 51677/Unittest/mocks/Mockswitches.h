/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSWITCHES_H
#define _MOCKSWITCHES_H

#include "Types.h"
#include "switches.h"

void Mockswitches_Init(void);
void Mockswitches_Destroy(void);
void Mockswitches_Verify(void);




#define change_mode_IgnoreAndReturn(cmock_retval) change_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void change_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define change_mode_ExpectAndReturn(cmock_retval) change_mode_CMockExpectAndReturn(__LINE__, cmock_retval)
void change_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_change_mode_CALLBACK)(int cmock_num_calls);
void change_mode_StubWithCallback(CMOCK_change_mode_CALLBACK Callback);
#define therapy_off_IgnoreAndReturn(cmock_retval) therapy_off_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void therapy_off_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define therapy_off_ExpectAndReturn(cmock_retval) therapy_off_CMockExpectAndReturn(__LINE__, cmock_retval)
void therapy_off_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_therapy_off_CALLBACK)(int cmock_num_calls);
void therapy_off_StubWithCallback(CMOCK_therapy_off_CALLBACK Callback);
#define therapy_on_IgnoreAndReturn(cmock_retval) therapy_on_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void therapy_on_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define therapy_on_ExpectAndReturn(cmock_retval) therapy_on_CMockExpectAndReturn(__LINE__, cmock_retval)
void therapy_on_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_therapy_on_CALLBACK)(int cmock_num_calls);
void therapy_on_StubWithCallback(CMOCK_therapy_on_CALLBACK Callback);
#define switch_ablate_parameters_IgnoreAndReturn(cmock_retval) switch_ablate_parameters_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void switch_ablate_parameters_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define switch_ablate_parameters_ExpectAndReturn(cmock_retval) switch_ablate_parameters_CMockExpectAndReturn(__LINE__, cmock_retval)
void switch_ablate_parameters_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_switch_ablate_parameters_CALLBACK)(int cmock_num_calls);
void switch_ablate_parameters_StubWithCallback(CMOCK_switch_ablate_parameters_CALLBACK Callback);
#define Switch_Coag_Mode_Parameters_Ignore() Switch_Coag_Mode_Parameters_CMockIgnore(__LINE__)
void Switch_Coag_Mode_Parameters_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define Switch_Coag_Mode_Parameters_Expect() Switch_Coag_Mode_Parameters_CMockExpect(__LINE__)
void Switch_Coag_Mode_Parameters_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Switch_Coag_Mode_Parameters_CALLBACK)(int cmock_num_calls);
void Switch_Coag_Mode_Parameters_StubWithCallback(CMOCK_Switch_Coag_Mode_Parameters_CALLBACK Callback);
#define Update_Irms_Overcurrent_Thresholds_Ignore() Update_Irms_Overcurrent_Thresholds_CMockIgnore(__LINE__)
void Update_Irms_Overcurrent_Thresholds_CMockIgnore(UNITY_LINE_TYPE cmock_line);
#define Update_Irms_Overcurrent_Thresholds_Expect() Update_Irms_Overcurrent_Thresholds_CMockExpect(__LINE__)
void Update_Irms_Overcurrent_Thresholds_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Update_Irms_Overcurrent_Thresholds_CALLBACK)(int cmock_num_calls);
void Update_Irms_Overcurrent_Thresholds_StubWithCallback(CMOCK_Update_Irms_Overcurrent_Thresholds_CALLBACK Callback);
#define rf_on_IgnoreAndReturn(cmock_retval) rf_on_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void rf_on_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define rf_on_ExpectAndReturn(cmock_retval) rf_on_CMockExpectAndReturn(__LINE__, cmock_retval)
void rf_on_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_rf_on_CALLBACK)(int cmock_num_calls);
void rf_on_StubWithCallback(CMOCK_rf_on_CALLBACK Callback);
#define rf_off_IgnoreAndReturn(cmock_retval) rf_off_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void rf_off_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define rf_off_ExpectAndReturn(cmock_retval) rf_off_CMockExpectAndReturn(__LINE__, cmock_retval)
void rf_off_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_rf_off_CALLBACK)(int cmock_num_calls);
void rf_off_StubWithCallback(CMOCK_rf_off_CALLBACK Callback);
#define measure_z_IgnoreAndReturn(cmock_retval) measure_z_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void measure_z_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define measure_z_ExpectAndReturn(cmock_retval) measure_z_CMockExpectAndReturn(__LINE__, cmock_retval)
void measure_z_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_measure_z_CALLBACK)(int cmock_num_calls);
void measure_z_StubWithCallback(CMOCK_measure_z_CALLBACK Callback);
#define legacy_wand_therapy_on_IgnoreAndReturn(cmock_retval) legacy_wand_therapy_on_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void legacy_wand_therapy_on_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define legacy_wand_therapy_on_ExpectAndReturn(cmock_retval) legacy_wand_therapy_on_CMockExpectAndReturn(__LINE__, cmock_retval)
void legacy_wand_therapy_on_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_legacy_wand_therapy_on_CALLBACK)(int cmock_num_calls);
void legacy_wand_therapy_on_StubWithCallback(CMOCK_legacy_wand_therapy_on_CALLBACK Callback);
#define legacy_wand_therapy_off_IgnoreAndReturn(cmock_retval) legacy_wand_therapy_off_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void legacy_wand_therapy_off_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define legacy_wand_therapy_off_ExpectAndReturn(cmock_retval) legacy_wand_therapy_off_CMockExpectAndReturn(__LINE__, cmock_retval)
void legacy_wand_therapy_off_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_legacy_wand_therapy_off_CALLBACK)(int cmock_num_calls);
void legacy_wand_therapy_off_StubWithCallback(CMOCK_legacy_wand_therapy_off_CALLBACK Callback);
#define lw_rf_on_IgnoreAndReturn(cmock_retval) lw_rf_on_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lw_rf_on_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define lw_rf_on_ExpectAndReturn(cmock_retval) lw_rf_on_CMockExpectAndReturn(__LINE__, cmock_retval)
void lw_rf_on_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_lw_rf_on_CALLBACK)(int cmock_num_calls);
void lw_rf_on_StubWithCallback(CMOCK_lw_rf_on_CALLBACK Callback);
#define lw_rf_off_IgnoreAndReturn(cmock_retval) lw_rf_off_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lw_rf_off_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define lw_rf_off_ExpectAndReturn(cmock_retval) lw_rf_off_CMockExpectAndReturn(__LINE__, cmock_retval)
void lw_rf_off_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_lw_rf_off_CALLBACK)(int cmock_num_calls);
void lw_rf_off_StubWithCallback(CMOCK_lw_rf_off_CALLBACK Callback);
#define therapy_start_screen_IgnoreAndReturn(cmock_retval) therapy_start_screen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void therapy_start_screen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define therapy_start_screen_ExpectAndReturn(cmock_arg1, cmock_retval) therapy_start_screen_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void therapy_start_screen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_therapy_start_screen_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void therapy_start_screen_StubWithCallback(CMOCK_therapy_start_screen_CALLBACK Callback);

#endif
